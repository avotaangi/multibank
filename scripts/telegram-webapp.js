const https = require('https');
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram Bot API
const sendTelegramRequest = (method, data) => {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify(data);
    
    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${process.env.TELEGRAM_BOT_TOKEN}/${method}`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };
    
    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          resolve(result);
        } catch (error) {
          reject(error);
        }
      });
    });
    
    req.on('error', (error) => {
      reject(error);
    });
    
    req.write(postData);
    req.end();
  });
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web App
const setupWebApp = async (webAppUrl) => {
  try {
    console.log('ü§ñ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram Web App...');
    
    const result = await sendTelegramRequest('setWebhook', {
      url: `${webAppUrl}/api/telegram/webhook`
    });
    
    if (result.ok) {
      console.log('‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', result.description);
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    throw error;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ Web App —á–µ—Ä–µ–∑ BotFather
const createWebApp = async (webAppUrl, appName = 'multibank') => {
  try {
    console.log('üì± –°–æ–∑–¥–∞–µ–º Web App —á–µ—Ä–µ–∑ BotFather...');
    console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather –≤ Telegram');
    console.log('2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newapp');
    console.log('3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞');
    console.log('4. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: MultiBank');
    console.log('5. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: –ú—É–ª—å—Ç–∏–±–∞–Ω–∫ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞–º–∏');
    console.log('6. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∫–æ–Ω–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    console.log(`7. –í–≤–µ–¥–∏—Ç–µ Web App URL: ${webAppUrl}`);
    console.log(`8. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è: ${appName}`);
    console.log('\nüéâ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  const webAppUrl = process.argv[2];
  
  if (!webAppUrl) {
    console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ URL Web App');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node telegram-webapp.js <webapp-url>');
    console.log('–ü—Ä–∏–º–µ—Ä: node telegram-webapp.js https://abc123.ngrok.io');
    process.exit(1);
  }
  
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('–ü—Ä–∏–º–µ—Ä: export TELEGRAM_BOT_TOKEN=your_bot_token');
    process.exit(1);
  }
  
  try {
    await setupWebApp(webAppUrl);
    await createWebApp(webAppUrl);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message);
    process.exit(1);
  }
};

main();
