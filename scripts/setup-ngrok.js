const { spawn } = require('child_process');
const https = require('https');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ngrok
const checkNgrok = () => {
  return new Promise((resolve) => {
    const ngrok = spawn('ngrok', ['version'], { stdio: 'pipe' });
    ngrok.on('close', (code) => {
      resolve(code === 0);
    });
    ngrok.on('error', () => {
      resolve(false);
    });
  });
};

// –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –æ—Ç ngrok
const getNgrokUrl = () => {
  return new Promise((resolve, reject) => {
    const req = https.get('http://localhost:4040/api/tunnels', (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const tunnels = JSON.parse(data);
          const httpsTunnel = tunnels.tunnels.find(tunnel => tunnel.proto === 'https');
          if (httpsTunnel) {
            resolve(httpsTunnel.public_url);
          } else {
            reject(new Error('HTTPS —Ç—É–Ω–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
          }
        } catch (error) {
          reject(error);
        }
      });
    });
    
    req.on('error', (error) => {
      reject(error);
    });
    
    req.setTimeout(5000, () => {
      req.destroy();
      reject(new Error('Timeout'));
    });
  });
};

// –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
const startNgrok = () => {
  return new Promise((resolve, reject) => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º ngrok...');
    
    const ngrok = spawn('ngrok', ['http', '8443', '--log=stdout'], {
      stdio: ['pipe', 'pipe', 'pipe']
    });
    
    let output = '';
    
    ngrok.stdout.on('data', (data) => {
      output += data.toString();
      console.log(data.toString());
    });
    
    ngrok.stderr.on('data', (data) => {
      console.error(data.toString());
    });
    
    ngrok.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`ngrok –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
      }
    });
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã ngrok –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    setTimeout(async () => {
      try {
        const url = await getNgrokUrl();
        console.log(`\nüåê –ü—É–±–ª–∏—á–Ω—ã–π URL: ${url}`);
        console.log(`üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç URL –¥–ª—è Telegram Web App`);
        resolve({ ngrok, url });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL:', error.message);
        reject(error);
      }
    }, 3000);
  });
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ngrok...');
    const ngrokInstalled = await checkNgrok();
    
    if (!ngrokInstalled) {
      console.log('‚ùå ngrok –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      console.log('üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ngrok:');
      console.log('   brew install ngrok/ngrok/ngrok');
      console.log('   –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —Å https://ngrok.com/');
      process.exit(1);
    }
    
    console.log('‚úÖ ngrok –Ω–∞–π–¥–µ–Ω');
    
    const { ngrok, url } = await startNgrok();
    
    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üì± Telegram Web App URL: ${url}`);
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –≤—ã—à–µ');
    console.log('2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /newapp –≤ @BotFather');
    console.log('3. –í—Å—Ç–∞–≤—å—Ç–µ URL –≤ –ø–æ–ª–µ "Web App URL"');
    console.log('4. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    console.log('\n‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    process.on('SIGINT', () => {
      console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ngrok...');
      ngrok.kill();
      process.exit(0);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
};

main();
